-- Ejercicios TRIGGER Complejidad de menor a mayor

1 - Crear un trigger AFTER INSERT sobre la tabla EMPLOYEES que muestre un mensaje cuando se agregue un nuevo empleado.

CREATE OR REPLACE TRIGGER TR_NuevoEmpleado
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    DBMS_OUTPUT.PUT_LINE('Nuevo empleado registrado: ' || :NEW.FIRST_NAME || ' ' || :NEW.LAST_NAME);
END;
/

-----------------------------------------------------------------------------------------------------------------------------------

2 - Crear un trigger BEFORE INSERT sobre la tabla EMPLOYEES que:
    Antes de insertar un nuevo empleado,
    Ponga el apellido (LAST_NAME) en mayúsculas automáticamente,
    Sin necesidad de que quien inserta lo haga manualmente.

CREATE OR REPLACE TRIGGER trg_mayuscula_apellido
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
    :NEW.LAST_NAME := UPPER(:NEW.LAST_NAME);
END;
/

-----------------------------------------------------------------------------------------------------------------------------------

3 - Crear un trigger BEFORE INSERT sobre la tabla EMPLOYEES que: Evite insertar un nuevo empleado si ya existe otro con el mismo FIRST_NAME, LAST_NAME y DEPARTMENT_ID.

CREATE OR REPLACE TRIGGER Empleados_Duplicados
BEFORE INSERT ON EMPLOYEES
FOR EACH ROW
DECLARE
  v_count NUMBER;
BEGIN
  SELECT COUNT(*) INTO v_count
  FROM EMPLOYEES
  WHERE FIRST_NAME = :NEW.FIRST_NAME
    AND LAST_NAME = :NEW.LAST_NAME
    AND DEPARTMENT_ID = :NEW.DEPARTMENT_ID;

  IF v_count > 0 THEN
    RAISE_APPLICATION_ERROR(-20010, 'Empleado duplicado en el mismo departamento.');
  END IF;
END;
/

-----------------------------------------------------------------------------------------------------------------------------------

4 - Crear un trigger AFTER INSERT sobre la tabla EMPLOYEES que:
Registre automáticamente en una tabla de auditoría (AUDITORIA_SALARIOS_ALTOS) todos los empleados cuyo SALARY sea mayor a 10,000.

CREATE OR REPLACE TRIGGER TRG_SALARIO_ALTO
AFTER INSERT ON EMPLOYEES
FOR EACH ROW
BEGIN
  IF :NEW.SALARY > 10000 THEN
    INSERT INTO AUDITORIA_SALARIOS_ALTOS 
    VALUES (:NEW.EMPLOYEE_ID, :NEW.FIRST_NAME, :NEW.LAST_NAME, :NEW.SALARY, SYSDATE);

    DBMS_OUTPUT.PUT_LINE('Nuevo empleado registrado en auditoría.');
  END IF;
END;
/
-----------------------------------------------------------------------------------------------------------------------------------
5- Escribe un trigger que, cuando se actualice el salario de un empleado en la tabla EMPLEADOS, realice las siguientes acciones:

Inserte un nuevo registro en la tabla HISTORIAL_SALARIOS con el employee_id, el salario anterior, el nuevo salario y la fecha de modificación.
Si la diferencia entre el nuevo salario y el salario anterior es mayor al 20% del salario anterior, 
inserta un registro en una tabla de auditoría llamada AUDITORIA_SALARIOS_ALTOS 

CREATE OR REPLACE TRIGGER TRG_ACTUALIZACION_SALARIOS
AFTER UPDATE OF SALARY ON EMPLOYEES -- Especificamos la columna SALARY
FOR EACH ROW
DECLARE
    v_porcentaje_incremento NUMBER;
BEGIN
    -- 1. Insertar en HISTORIAL_SALARIOS
    INSERT INTO HISTORIAL_SALARIOS (EMPLOYEE_ID, salario_anterior, salario_nuevo, fecha_cambio)
    VALUES (:OLD.employee_id, :OLD.salary, :NEW.salary, SYSDATE);
    DBMS_OUTPUT.PUT_LINE('Guardado en la tabla HISTORIAL_SALARIOS');

    -- 2. Verificar si la diferencia es mayor al 20%
    IF (:NEW.salary - :OLD.salary) > (0.20 * :OLD.salary) THEN
        -- Calcular el porcentaje de incremento
        v_porcentaje_incremento := ((:NEW.salary - :OLD.salary) / :OLD.salary) * 100;

        -- Insertar en AUDITORIA_SALARIOS_ALTOS
        INSERT INTO AUDITORIA_SALARIOS_ALTOS (employee_id, fecha_modificacion, salario_anterior, salario_nuevo, porcentaje_incremento)
        VALUES (:OLD.employee_id, SYSDATE, :OLD.salary, :NEW.salary, v_porcentaje_incremento);
        DBMS_OUTPUT.PUT_LINE('GUARDADO EN LA TABLA AUDITORIA_SALARIOS_ALTOS');
    END IF;
END;
/











