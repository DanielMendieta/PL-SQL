Trigger Compuesto en PL/SQL (Oracle) es un tipo especial de trigger que permite definir m√∫ltiples secciones de c√≥digo dentro de un mismo trigger, ejecut√°ndose en diferentes momentos del ciclo de una operaci√≥n INSERT, UPDATE o DELETE.

Se divide en cuatro secciones seg√∫n el momento en el que se ejecuta el c√≥digo:

1Ô∏è‚É£ BEFORE STATEMENT ‚Üí Antes de que la operaci√≥n comience.
2Ô∏è‚É£ BEFORE EACH ROW ‚Üí Antes de modificar cada fila afectada.
3Ô∏è‚É£ AFTER EACH ROW ‚Üí Despu√©s de modificar cada fila afectada.
4Ô∏è‚É£ AFTER STATEMENT ‚Üí Despu√©s de que la operaci√≥n termine.

¬øPara qu√© sirven los Triggers Compuestos?
‚úÖ Permiten manejar acciones m√°s complejas en una sola estructura.
‚úÖ Mejoran el rendimiento, evitando la creaci√≥n de m√∫ltiples triggers separados.
‚úÖ Son √∫tiles para auditor√≠a, validaciones y actualizaciones autom√°ticas.

CREATE OR REPLACE TRIGGER trg_compuesto_empleados
FOR UPDATE ON empleados
COMPOUND TRIGGER

    -- Secci√≥n BEFORE STATEMENT
    BEFORE STATEMENT IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Inicio de actualizaci√≥n de empleados.');
    END BEFORE STATEMENT;

    -- Secci√≥n BEFORE EACH ROW
    BEFORE EACH ROW IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Actualizando empleado: ' || :OLD.nombre);
    END BEFORE EACH ROW;

    -- Secci√≥n AFTER EACH ROW
    AFTER EACH ROW IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Empleado actualizado: ' || :NEW.nombre);
    END AFTER EACH ROW;

    -- Secci√≥n AFTER STATEMENT
    AFTER STATEMENT IS
    BEGIN
        DBMS_OUTPUT.PUT_LINE('Fin de actualizaci√≥n de empleados.');
    END AFTER STATEMENT;

END trg_compuesto_empleados;
/

Explicaci√≥n del Ejemplo
üîπ Cuando se ejecuta un UPDATE en la tabla empleados, el trigger compuesto:
‚úÖ Antes de la actualizaci√≥n (BEFORE STATEMENT) ‚Üí Muestra un mensaje de inicio.
‚úÖ Antes de modificar cada fila (BEFORE EACH ROW) ‚Üí Informa qu√© empleado se est√° actualizando.
‚úÖ Despu√©s de modificar cada fila (AFTER EACH ROW) ‚Üí Confirma la actualizaci√≥n del empleado.
‚úÖ Despu√©s de la actualizaci√≥n (AFTER STATEMENT) ‚Üí Muestra un mensaje de finalizaci√≥n.

Triggers Compuestos son ideales para manejar m√∫ltiples eventos dentro de un mismo trigger, 
mejorando la eficiencia y organizaci√≥n del c√≥digo en PL/SQL. üöÄ

------------------------------------------------------------------------------------------------------------

Crea un Trigger llamado tr_aumento_salarial que se active antes de una actualizaci√≥n en la tabla empleados.
Si el salario nuevo es menor al salario actual, el trigger debe impedir la actualizaci√≥n.
Si el salario nuevo es mayor, la actualizaci√≥n se permite sin problemas.

id_empleado (Identificaci√≥n del empleado)
nombre (Nombre del empleado)
salario (Salario actual)
fecha_contratacion (Fecha en que fue contratado)

SET SERVEROUTPUT ON  

CREATE OR REPLACE TRIGGER tr_aumento_salarial
BEFORE UPDATE ON empleados
FOR EACH ROW  
BEGIN
    IF :NEW.salario < :OLD.salario THEN
        RAISE_APPLICATION_ERROR (-20000, 'ERROR VERIFIQUE EL NUEVO SALARIO');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('ACTUALIZACION REALIZADA');
    END IF;
END;
/

------------------------------------------------------------------------------------------------------------


Crea un Trigger llamado tr_historial_empleado que se active despu√©s de una actualizaci√≥n en la tabla empleados.
El trigger debe insertar un registro en la tabla historial_empleados cada vez que se actualice el salario de un empleado.
Los datos que se deben insertar son:
id_empleado: el mismo que se est√° actualizando.
salario_anterior: el salario antes de la actualizaci√≥n.
salario_nuevo: el salario despu√©s de la actualizaci√≥n.
fecha_cambio: la fecha en que se realiz√≥ la actualizaci√≥n.

SET SERVEROUTPUT ON  

CREATE OR REPLACE TRIGGER tr_historial_empleado
AFTER UPDATE ON empleados
FOR EACH ROW
BEGIN
    INSERT INTO historial_empleados (id_empleado, salario_anterior, salario_nuevo, fecha_cambio)
    VALUES (:OLD.id_empleado, :OLD.salario, :NEW.salario, SYSDATE);
    DBMS_OUTPUT.PUT_LINE('INSERCION REALIZADA');
END;
/

















