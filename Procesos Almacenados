SET SERVEROUTPUT ON 

CREATE OR REPLACE PROCEDURE Saludar
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Â¡Hola, bienvenido a PL/SQL!');
END;
/

EXEC Saludar;
-------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON  
CREATE OR REPLACE PROCEDURE Saludar_Usuario(
Nombre IN varchar2(20)
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Â¡BIENVENIDO!' || Nombre);
END;
/


EXEC Saludar_Usuario ('Daniel');
-------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON 
CREATE OR REPLACE PROCEDURE Saludar_Completo(
    Nombre IN VARCHAR2,
    Apellido IN VARCHAR2
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('Â¡Hola, ' || Nombre || ' ' || Apellido || '! Bienvenido a PL/SQL!');
END;
/

EXEC Saludar_Completo('Daniel', 'Mendieta');
---------------------------------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON 
CREATE OR REPLACE PROCEDURE Evaluar_Numero(
Numero IN NUMBER
)
IS

BEGIN   
IF Numero > 0 THEN
DBMS_OUTPUT.PUT_LINE ('El Numero es positivo');

ELSIF Numero < 0 THEN
DBMS_OUTPUT.PUT_LINE ('El Numero es negativo');

ELSE 
DBMS_OUTPUT.PUT_LINE('EL Numero es CERO');
END IF;
END;

/

EXEC Evaluar_Numero (-1);
---------------------------------------------------------------------------------------------------------------

Consigna del Ejercicio
Crea un procedimiento almacenado en PL/SQL llamado Obtener_Total_Pedidos que reciba como parÃ¡metro el ID del cliente y 
devuelva la suma total de sus pedidos.

ðŸ“Œ Requisitos
El procedimiento debe recibir un ID de cliente como parÃ¡metro.
Debe calcular la suma del total de sus pedidos en la tabla Pedidos.
Debe mostrar el resultado en DBMS_OUTPUT.PUT_LINE con un mensaje como:


SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE Obtener_Total_Pedidos(
    ID_Cliente IN NUMBER
)
IS
    Resultado NUMBER := 0; -- Declaramos la variable correctamente
    NombreCliente VARCHAR2(50);
    ApellidoCliente VARCHAR2(50);
BEGIN   
    -- Usamos SELECT INTO para asignar valores a las variables
    SELECT Clientes.Nombre, Clientes.Apellido, COUNT(Pedidos.ID_Pedido)
    INTO NombreCliente, ApellidoCliente, Resultado
    FROM Clientes
    LEFT JOIN Pedidos ON Clientes.ID_Cliente = Pedidos.ID_Cliente
    WHERE Clientes.ID_Cliente = ID_Cliente
    GROUP BY Clientes.Nombre, Clientes.Apellido;

    -- Validamos si el cliente tiene pedidos
    IF Resultado = 0 THEN 
        DBMS_OUTPUT.PUT_LINE('El cliente ' || NombreCliente || ' ' || ApellidoCliente || ' no tiene pedidos realizados.');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('El cliente ' || NombreCliente || ' ' || ApellidoCliente || ' tiene ' || Resultado || ' pedidos.');
    END IF;
END;
/

-- Ejecutar el procedimiento
EXEC Obtener_Total_Pedidos(5);

---------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE CALC_TAX 
(EMPL IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    T1 IN NUMBER)
IS
  TAX NUMBER:=0;
  SAL NUMBER:=0;
BEGIN
   IF T1 <0 OR T1 > 60 THEN 
      RAISE_APPLICATION_ERROR(-20000,'EL PORCENTAJE DEBE ESTAR ENTRE 0 Y 60');
    END IF;
   SELECT SALARY INTO SAL FROM EMPLOYEES    WHERE EMPLOYEE_ID=EMPL;
   --T1:=0;
   TAX:=SAL*T1/100;
   DBMS_OUTPUT.PUT_line('SALARY:'||SAL);
   DBMS_OUTPUT.PUT_line('TAX:'||TAX);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_line('NO EXISTE EL EMPLEADO');
END;
/

set serveroutput on
DECLARE
  A NUMBER;
  B NUMBER;
begin
  A:=120;
  B:=5;
  calc_tax(A,B);
end;
/

















