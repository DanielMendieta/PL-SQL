1 - Consigna
Crea un procedimiento en PL/SQL que realice lo siguiente:

Identifique a los empleados con m√°s de 5 a√±os de antig√ºedad en la empresa.
Si su salario est√° por debajo del promedio general, se les aplicar√° un aumento del 20%.
Se almacenar√° un registro en la tabla historial_aumentos con los siguientes datos:
ID del empleado
Salario anterior
Nuevo salario
Fecha de cambio
Justificaci√≥n: ‚ÄòAumento por antig√ºedad y salario bajo‚Äô
Si alg√∫n empleado ya recibi√≥ un aumento en el √∫ltimo a√±o, se ignorar√° su caso.

CREATE OR REPLACE PROCEDURE ajustar_salarios IS
    CURSOR c_emp IS 
        SELECT e.employee_id, e.salary, e.department_id 
        FROM employees e
        WHERE e.salary < (SELECT AVG(salary) FROM employees WHERE department_id = e.department_id)
        AND ADD_MONTHS(e.hire_date, 60) <= SYSDATE
        AND NOT EXISTS (
            SELECT 1 FROM historial_salario h
            WHERE h.employee_id = e.employee_id
            AND h.fecha_cambio >= ADD_MONTHS(SYSDATE, -12)
        )
        FOR UPDATE;

    v_nuevo_salario employees.salary%TYPE;
BEGIN
    FOR emp IN c_emp LOOP
        v_nuevo_salario := emp.salary * 1.15;

        -- Actualizar el salario del empleado
        UPDATE employees
        SET salary = v_nuevo_salario
        WHERE employee_id = emp.employee_id;

        -- Insertar el cambio en la tabla historial_salario con la justificaci√≥n
        INSERT INTO historial_salario (employee_id, salario_anterior, salario_nuevo, fecha_cambio, justificacion)
        VALUES (emp.employee_id, emp.salary, v_nuevo_salario, SYSDATE, 'Aumento por antig√ºedad y salario bajo');

        -- Mostrar informaci√≥n en consola
        DBMS_OUTPUT.PUT_LINE('Empleado ' || emp.employee_id || ' actualizado. Nuevo salario: ' || v_nuevo_salario);
    END LOOP;
END ajustar_salarios;
/


BEGIN
    ajustar_salarios;
END;
/


-------------------------------------------------------------------------------------------------------------------
2 - SET SERVEROUTPUT ON 

CREATE OR REPLACE PROCEDURE Saludar
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('¬°Hola, bienvenido a PL/SQL!');
END;
/

EXEC Saludar;
-------------------------------------------------------------------------------------------------------------------
3 - SET SERVEROUTPUT ON  
CREATE OR REPLACE PROCEDURE Saludar_Usuario(
Nombre IN varchar2(20)
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('¬°BIENVENIDO!' || Nombre);
END;
/


EXEC Saludar_Usuario ('Daniel');
-------------------------------------------------------------------------------------------------------------------
4 - SET SERVEROUTPUT ON 
CREATE OR REPLACE PROCEDURE Saludar_Completo(
    Nombre IN VARCHAR2,
    Apellido IN VARCHAR2
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE('¬°Hola, ' || Nombre || ' ' || Apellido || '! Bienvenido a PL/SQL!');
END;
/

EXEC Saludar_Completo('Daniel', 'Mendieta');
---------------------------------------------------------------------------------------------------------------------
5 - SET SERVEROUTPUT ON 
CREATE OR REPLACE PROCEDURE Evaluar_Numero(
Numero IN NUMBER
)
IS

BEGIN   
IF Numero > 0 THEN
DBMS_OUTPUT.PUT_LINE ('El Numero es positivo');

ELSIF Numero < 0 THEN
DBMS_OUTPUT.PUT_LINE ('El Numero es negativo');

ELSE 
DBMS_OUTPUT.PUT_LINE('EL Numero es CERO');
END IF;
END;

/

EXEC Evaluar_Numero (-1);
---------------------------------------------------------------------------------------------------------------
6 - Consigna del Ejercicio
Crea un procedimiento almacenado en PL/SQL llamado Obtener_Total_Pedidos que reciba como par√°metro el ID del cliente y 
devuelva la suma total de sus pedidos.

üìå Requisitos
El procedimiento debe recibir un ID de cliente como par√°metro.
Debe calcular la suma del total de sus pedidos en la tabla Pedidos.
Debe mostrar el resultado en DBMS_OUTPUT.PUT_LINE con un mensaje como:


SET SERVEROUTPUT ON;

CREATE OR REPLACE PROCEDURE Obtener_Total_Pedidos(
    ID_Cliente IN NUMBER
)
IS
    Resultado NUMBER := 0; -- Declaramos la variable correctamente
    NombreCliente VARCHAR2(50);
    ApellidoCliente VARCHAR2(50);
BEGIN   
    -- Usamos SELECT INTO para asignar valores a las variables
    SELECT Clientes.Nombre, Clientes.Apellido, COUNT(Pedidos.ID_Pedido)
    INTO NombreCliente, ApellidoCliente, Resultado
    FROM Clientes
    LEFT JOIN Pedidos ON Clientes.ID_Cliente = Pedidos.ID_Cliente
    WHERE Clientes.ID_Cliente = ID_Cliente
    GROUP BY Clientes.Nombre, Clientes.Apellido;

    -- Validamos si el cliente tiene pedidos
    IF Resultado = 0 THEN 
        DBMS_OUTPUT.PUT_LINE('El cliente ' || NombreCliente || ' ' || ApellidoCliente || ' no tiene pedidos realizados.');
    ELSE 
        DBMS_OUTPUT.PUT_LINE('El cliente ' || NombreCliente || ' ' || ApellidoCliente || ' tiene ' || Resultado || ' pedidos.');
    END IF;
END;
/

-- Ejecutar el procedimiento
EXEC Obtener_Total_Pedidos(5);

---------------------------------------------------------------------------------------------------------------
7 - CREATE OR REPLACE PROCEDURE CALC_TAX 
(EMPL IN EMPLOYEES.EMPLOYEE_ID%TYPE,
    T1 IN NUMBER)
IS
  TAX NUMBER:=0;
  SAL NUMBER:=0;
BEGIN
   IF T1 <0 OR T1 > 60 THEN 
      RAISE_APPLICATION_ERROR(-20000,'EL PORCENTAJE DEBE ESTAR ENTRE 0 Y 60');
    END IF;
   SELECT SALARY INTO SAL FROM EMPLOYEES    WHERE EMPLOYEE_ID=EMPL;
   --T1:=0;
   TAX:=SAL*T1/100;
   DBMS_OUTPUT.PUT_line('SALARY:'||SAL);
   DBMS_OUTPUT.PUT_line('TAX:'||TAX);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_line('NO EXISTE EL EMPLEADO');
END;
/

set serveroutput on
DECLARE
  A NUMBER;
  B NUMBER;
begin
  A:=120;
  B:=5;
  calc_tax(A,B);
end;
/

---------------------------------------------------------------------------------------------------------------
8 - Procedimiento almacenado llamado AUMENTAR_SALARIO que reciba dos par√°metros: el ID de un empleado y un porcentaje de aumento. 
El procedimiento debe actualizar el salario del empleado multiplic√°ndolo por el porcentaje indicado y mostrar un mensaje de confirmaci√≥n

CREATE OR REPLACE PROCEDURE AUMENTAR_SALARIO(
    ID_EMPLEADO IN NUMBER,
    Porcentaje IN NUMBER
)
IS
BEGIN
    UPDATE HR.EMPLOYEES 
    SET SALARY = SALARY * (1 + Porcentaje / 100)
    WHERE EMPLOYEE_ID = ID_EMPLEADO;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END AUMENTAR_SALARIO;
/

---------------------------------------------------------------------------------------------------------------

9 - rear un procedimiento llamado ACTUALIZAR_SALARIO que reciba dos par√°metros:

EMPLOYEE_ID

NUEVO_SALARIO

El procedimiento debe actualizar el salario del empleado indicado.
Si el empleado no existe, mostrar un mensaje de error con DBMS_OUTPUT.PUT_LINE.



SET SERVEROUTPUT ON;

create or replace procedure ACTUALIZAR_SALARIO (
EMPLOYEE_ID IN NUMBER
NUEVO_SALARIO IN NUMBER
)
IS

BEGIN

update employees set salary = ACTUALIZAR_SALARIO.NUEVO_SALARIO
where employee_id = ACTUALIZAR_SALARIO.EMPLOYEE_ID

IF SQL%ROWCOUNT = 0 THEN
   DBMS_OUTPUT.PUT_LINE('Este empleado no existe');
ELSE
   DBMS_OUTPUT.PUT_LINE('Salario actualizado correctamente');
END IF;


END;
/


BEGIN
    ACTUALIZAR_SALARIO(100, 100);
END;
/














