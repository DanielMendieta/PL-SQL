/* 
üìå Escenario:
Una empresa necesita limpiar y cargar informaci√≥n de empleados en una nueva tabla.

Tabla de origen: empleados_raw (datos sin procesar).
Tabla de destino: empleados_limpios (datos limpios y transformados).
Requisitos de transformaci√≥n:
Los nombres deben guardarse en may√∫sculas.
Los salarios deben aumentar un 10% si son menores a 3000.
No se deben insertar empleados con salario nulo o negativo.
Se debe usar:
Procedimientos almacenados.
Cursores para procesar los datos.
Un Job para ejecutar la carga autom√°ticamente cada d√≠a a las 2 AM.
*/

1Ô∏è‚É£ Crear las Tablas

-- Tabla de empleados sin procesar (origen)
CREATE TABLE empleados_raw (
    id NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    salario NUMBER
);

-- Tabla de empleados procesados (destino)
CREATE TABLE empleados_limpios (
    id NUMBER PRIMARY KEY,
    nombre VARCHAR2(100),
    salario NUMBER
);
--------------------------------------------------------------------------------------------------------------------------
2Ô∏è‚É£ Crear el Procedimiento ETL

CREATE OR REPLACE PROCEDURE etl_cargar_empleados IS
    CURSOR c_empleados IS 
        SELECT id, nombre, salario 
        FROM empleados_raw 
        WHERE salario IS NOT NULL AND salario > 0;  -- Filtrar datos sucios
BEGIN
    FOR reg IN c_empleados LOOP
        INSERT INTO empleados_limpios (id, nombre, salario)
        VALUES (reg.id, UPPER(reg.nombre), 
                CASE WHEN reg.salario < 3000 THEN reg.salario * 1.10 ELSE reg.salario END);
    END LOOP;
    
    COMMIT;
END;
/

üìå ¬øQu√© hace este procedimiento?
‚úî Usa un cursor para recorrer los datos.
‚úî Convierte los nombres a may√∫sculas.
‚úî Aumenta el 10% los salarios menores a 3000.
‚úî Filtra salarios negativos o nulos.
‚úî Inserta los datos limpios en empleados_limpios.
--------------------------------------------------------------------------------------------------------------------------

3Ô∏è‚É£ Crear un Job para ejecutar el ETL autom√°ticamente

BEGIN
    DBMS_SCHEDULER.create_job (
        job_name        => 'JOB_ETL_EMPLEADOS',
        job_type        => 'STORED_PROCEDURE',
        job_action      => 'ETL_CARGAR_EMPLEADOS',
        start_date      => SYSTIMESTAMP,
        repeat_interval => 'FREQ=DAILY; BYHOUR=02; BYMINUTE=0; BYSECOND=0',
        enabled         => TRUE
    );
END;
/


üìå ¬øQu√© hace este Job?
‚úî Ejecuta el ETL autom√°ticamente cada d√≠a a las 2 AM.
‚úî Evita la ejecuci√≥n manual del procedimiento.
--------------------------------------------------------------------------------------------------------------------------

4Ô∏è‚É£ Probar el ETL

-- Insertar datos sin procesar
INSERT INTO empleados_raw VALUES (1, 'Carlos L√≥pez', 2500);
INSERT INTO empleados_raw VALUES (2, 'Ana M√©ndez', 3200);
INSERT INTO empleados_raw VALUES (3, 'Pedro G√≥mez', NULL);
INSERT INTO empleados_raw VALUES (4, 'Laura P√©rez', -500);  -- Salario inv√°lido

COMMIT;

-- Ejecutar el ETL manualmente
BEGIN
    etl_cargar_empleados;
END;
/

-- Verificar los datos procesados
SELECT * FROM empleados_limpios;


üìå ¬øQu√© pasar√° al ejecutar esto?
‚úî Carlos L√≥pez tendr√° su salario aumentado un 10%.
‚úî Ana M√©ndez se insertar√° sin cambios.
‚úî Pedro G√≥mez y Laura P√©rez no se insertar√°n por datos inv√°lidos.


























